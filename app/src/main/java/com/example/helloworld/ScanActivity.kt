package com.example.helloworld

import android.annotation.SuppressLint
import android.app.Activity
import android.bluetooth.BluetoothAdapter
import com.example.helloworld.ui.device.adapter.DeviceAdapter
import com.example.helloworld.ui.wifi.adapter.WifiAdapter


import android.bluetooth.BluetoothGatt
import android.bluetooth.BluetoothManager
import android.bluetooth.le.BluetoothLeScanner

//import android.bluetooth.*

import android.bluetooth.le.ScanCallback
import android.bluetooth.le.ScanFilter
import android.bluetooth.le.ScanResult
import android.bluetooth.le.ScanSettings
import android.content.Context
import android.content.Intent
import android.content.pm.PackageManager
import android.location.LocationManager
import android.os.Build
import androidx.appcompat.app.AppCompatActivity
import android.os.Bundle
import android.os.Handler
import android.os.Looper
import android.widget.Toast
import androidx.activity.result.contract.ActivityResultContracts
import androidx.core.app.ActivityCompat
import androidx.core.content.ContextCompat

import android.Manifest
import android.bluetooth.BluetoothGattCharacteristic
import android.bluetooth.BluetoothGattService
import android.provider.Settings
import android.view.View
import android.widget.Button
import android.widget.ImageView
import android.widget.TextView
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView
import com.afollestad.materialdialogs.MaterialDialog
import com.example.helloworld.ui.data.Device
import com.google.android.material.snackbar.Snackbar

//import android.content.pm.PackageManager
//import android.os.Build



class ScanActivity : AppCompatActivity() {

    companion object {
        // Variable ajoutÃ©e par moi car elle n'Ã©tait pas dans le code fournit apr le prof
        // Demande de permission
        private const val PERMISSION_REQUEST_LOCATION = 1
//        private const val REQUEST_BLUETOOTH_CONNECT = 2

        // TEST : AjoutÃ© pour tester
        fun getStartIntent(context: Context): Intent {
            return Intent(context, ScanActivity::class.java)
        }
    }

    // Gestion du Bluetooth
    // L'Adapter permettant de se connecter
    private var bluetoothAdapter: BluetoothAdapter? = null

    // La connexion actuellement Ã©tablie
    private var currentBluetoothGatt: BluetoothGatt? = null

    // Â« Interface systÃ¨me nous permettant de scanner Â»
    private var bluetoothLeScanner: BluetoothLeScanner? = null

    // Parametrage du scan BLE
    private val scanSettings = ScanSettings.Builder().setScanMode(ScanSettings.SCAN_MODE_LOW_LATENCY).build()

    // On ne retourne que les Â« Devices Â» proposant le bon UUID
    private var scanFilters: List<ScanFilter> = arrayListOf(
    //  ScanFilter.Builder().setServiceUuid(ParcelUuid(BluetoothLEManager.DEVICE_UUID)).build()
    )

    // Variable de fonctionnement
    private var mScanning = false
    private val handler = Handler(Looper.getMainLooper())

    // DataSource de notre adapter.
    private val bleDevicesFoundList = arrayListOf<Device>()



    private var rvDevices: RecyclerView? = null
    // TODO : wifi
    private var rvWifi: RecyclerView? = null
    private var startScan: Button? = null
    private var currentConnexion: TextView? = null
    private var disconnect: Button? = null
    private var toggleLed: Button? = null
    // TODO : anoimation
    private var toggleAnimation: Button? = null
    private var ledStatus: ImageView? = null
    private var ledCount: TextView? = null      // AjoutÃ© par moi

    // Ce qui se passe Ã  la crÃ©ation de l'activity
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_scan)
        setupRecycler()

        rvWifi = findViewById<RecyclerView>(R.id.rvWifi)
        // TODO : wifi
        rvDevices = findViewById<RecyclerView>(R.id.rvDevices)
//        currentConnexion = findViewById<View>(R.id.currentConnexion)
        currentConnexion = findViewById<TextView>(R.id.currentConnexion)
//        disconnect = findViewById<View>(R.id.disconnect)
        disconnect = findViewById<Button>(R.id.disconnect)
        startScan = findViewById<Button>(R.id.startScan)
//        toggleLed = findViewById<View>(R.id.toggleLed)
        toggleLed = findViewById<Button>(R.id.toggleLed)
        toggleAnimation = findViewById<Button>(R.id.toggleAnimation)

//        ledStatus = findViewById<View>(R.id.ledStatus)
        ledStatus = findViewById<ImageView>(R.id.ledStatus)
        ledCount = findViewById<Button>(R.id.ledCount)      // AjoutÃ© par moi

        startScan?.setOnClickListener {
            askForPermission()  // AprÃ¨s la demande de permission Ã§a lance automatiquement le scan si l'autorisation est acceptÃ©e
        }

        disconnect?.setOnClickListener {
            // Appeler la bonne mÃ©thode
            disconnectFromCurrentDevice()
        }

        toggleLed?.setOnClickListener {
            // Appeler la bonne mÃ©thode
            toggleLed()
        }

        toggleAnimation?.setOnClickListener {
            // Appeler la bonne mÃ©thode
            sendAnimation()
        }

        // On cache une partie de l'interface au dÃ©part, qui sera affichÃ©e une fois que l'on sera connectÃ© au Device
        setUiMode(false)

    }

    /**
     * GÃ¨re l'action aprÃ¨s la demande de permission.
     * 2 cas possibles :
     * - RÃ©ussite ðŸŽ‰.
     * - Ã‰chec (refus utilisateur).
     */
    override fun onRequestPermissionsResult(requestCode: Int, permissions: Array<out String>, grantResults: IntArray) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults)

        // Ici placer les messages de demande de permission et expliquer pourquoi

        Toast.makeText(this, "onRequestPermissionsResult", Toast.LENGTH_SHORT).show()

        if (requestCode == PERMISSION_REQUEST_LOCATION) {
            if (grantResults[0] == PackageManager.PERMISSION_GRANTED && locationServiceEnabled()) {
                // Permission OK & service de localisation actif => Nous pouvons lancer l'initialisation du BLE.
                // En appelant la mÃ©thode setupBLE(), La mÃ©thode setupBLE() va initialiser le BluetoothAdapter et lancera le scan.

                Toast.makeText(this, "Permission OK", Toast.LENGTH_SHORT).show()

                setupBLE()
            } else if (!locationServiceEnabled()) {
                // Inviter Ã  activer la localisation

                Toast.makeText(this, "Veuillez activer la localisation", Toast.LENGTH_SHORT).show()


                startActivity(Intent(Settings.ACTION_LOCATION_SOURCE_SETTINGS))
            } else {
                // Permission KO => GÃ©rer le cas.
                // Vous devez ici modifier le code pour gÃ©rer le cas d'erreur (permission refusÃ©)
                // Avec par exemple une Dialog

                // Demande Ã  l'utilisateur d'accepter la permission de localisation

                Toast.makeText(this, "Veuillez accepter la permission de localisation", Toast.LENGTH_SHORT).show()

                MaterialDialog(this).show {
                    title(R.string.titre_bouton)
                    message(R.string.message_permission_localisation_refusee)
                }
            }
        }
    }

    /**
     * Permet de vÃ©rifier si l'application possede la permission Â« Localisation Â». OBLIGATOIRE pour scanner en BLE
     * Sur Android 11, il faut la permission Â« BLUETOOTH_CONNECT Â» et Â« BLUETOOTH_SCAN Â»
     * Sur Android 10 et infÃ©rieur, il faut la permission Â« ACCESS_FINE_LOCATION Â» qui permet de scanner en BLE
     */
    private fun hasPermission(): Boolean {
        return if (Build.VERSION.SDK_INT < Build.VERSION_CODES.S) {
            ContextCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED
        } else {
            ContextCompat.checkSelfPermission(this, Manifest.permission.BLUETOOTH_CONNECT) == PackageManager.PERMISSION_GRANTED && ContextCompat.checkSelfPermission(this, Manifest.permission.BLUETOOTH_SCAN) == PackageManager.PERMISSION_GRANTED
        }
    }

    /**
     * Demande de la permission (ou des permissions) Ã  l'utilisateur.
     * Sur Android 11, il faut la permission Â« BLUETOOTH_CONNECT Â» et Â« BLUETOOTH_SCAN Â»
     * Sur Android 10 et infÃ©rieur, il faut la permission Â« ACCESS_FINE_LOCATION Â» qui permet de scanner en BLE
     */
    private fun askForPermission() {

        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.S) {
            ActivityCompat.requestPermissions(this, arrayOf(Manifest.permission.ACCESS_FINE_LOCATION), PERMISSION_REQUEST_LOCATION)
        } else {
            ActivityCompat.requestPermissions(this, arrayOf(Manifest.permission.BLUETOOTH_CONNECT, Manifest.permission.BLUETOOTH_SCAN), PERMISSION_REQUEST_LOCATION)
        }
    }

    private fun locationServiceEnabled(): Boolean {
        return if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.P) {
            // This is new method provided in API 28
            val lm = this.getSystemService(Context.LOCATION_SERVICE) as LocationManager
            lm.isLocationEnabled
        } else {
            // This is Deprecated in API 28
            val mode = Settings.Secure.getInt(this.contentResolver, Settings.Secure.LOCATION_MODE, Settings.Secure.LOCATION_MODE_OFF)
            mode != Settings.Secure.LOCATION_MODE_OFF
        }
    }

    /**
     * La mÃ©thode Â« registerForActivityResult Â» permet de gÃ©rer le rÃ©sultat d'une activitÃ©.
     * Ce code est appelÃ© Ã  chaque fois que l'utilisateur rÃ©pond Ã  la demande d'activation du Bluetooth (visible ou non)
     * Si l'utilisateur accepte et donc que le BLE devient disponible, on lance le scan.
     * Si l'utilisateur refuse, on affiche un message d'erreur (Toast).
     */
    val registerForResult = registerForActivityResult(ActivityResultContracts.StartActivityForResult()) {
        if (it.resultCode == Activity.RESULT_OK) {
            // Le Bluetooth est activÃ©, on lance le scan
            scanLeDevice()
        } else {
            // TODO : Bluetooth non activÃ©, vous DEVEZ gÃ©rer ce cas autrement qu'avec un Toast.

            // Affiche un dialog pour demander Ã  l'utilisateur d'activer le Bluetooth

        }
    }

    /**
     * RÃ©cupÃ©ration de l'adapter Bluetooth & vÃ©rification si celui-ci est actif.
     * Si il n'est pas actif, on demande Ã  l'utilisateur de l'activer. Dans ce cas, au rÃ©sultat le code prÃ©sent dans Â« registerForResult Â» sera appelÃ©.
     * Si il est dÃ©jÃ  actif, on lance le scan.
     */
    @SuppressLint("MissingPermission")
    private fun setupBLE() {
        (getSystemService(BLUETOOTH_SERVICE) as BluetoothManager?)?.let { bluetoothManager ->
            bluetoothAdapter = bluetoothManager.adapter
            if (bluetoothAdapter != null && !bluetoothManager.adapter.isEnabled) {

                // Demande Ã  activer le Bluetooth
//                MaterialDialog(this).show {
//                    title(R.string.titre_bouton)
//                    message(R.string.message_bluetooth_non_active)
//                }
                Snackbar.make(findViewById(android.R.id.content), getString(R.string.message_bluetooth_non_active), Snackbar.LENGTH_LONG).setAction("Activer") { // Ajoute un bouton "Action" au message
                    // Ce qui se passe quand on clique sur le bouton
                    registerForResult.launch(Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE))
                }.show()

            } else {
                scanLeDevice()
            }
        }
    }


    // Le scan va durer 10 secondes seulement, sauf si vous passez une autre valeur comme paramÃ¨tre.
    @SuppressLint("MissingPermission")
    private fun scanLeDevice(scanPeriod: Long = 10000) {
        if (!mScanning) {
            // VÃ©rifiez si les permissions sont accordÃ©es
            if (hasPermission()) {
                bluetoothLeScanner = bluetoothAdapter?.bluetoothLeScanner

                // On vide la liste qui contient les devices actuellement trouvÃ©s
                bleDevicesFoundList.clear()

                // Ã‰vite de scanner en double
                mScanning = true

                // On lance une tache qui durera Â« scanPeriod Â»
                handler.postDelayed({
                    mScanning = false
//                    if (ActivityCompat.checkSelfPermission(
//                            this, // Assurez-vous que 'this' pointe vers votre activitÃ©
//                            Manifest.permission.BLUETOOTH_SCAN
//                        ) != PackageManager.PERMISSION_GRANTED
//                    ) {
//                        // La permission n'est pas accordÃ©e, vous pouvez demander la permission ici
//                        return@postDelayed
//                    }
                    bluetoothLeScanner?.stopScan(leScanCallback)
                    Toast.makeText(this, getString(R.string.scan_ended), Toast.LENGTH_SHORT).show()
                }, scanPeriod)

                // On lance le scan
                bluetoothLeScanner?.startScan(scanFilters, scanSettings, leScanCallback)
            } else {
                // Demander les permissions ou gÃ©rer l'absence de permission
                askForPermission()
            }
        }
    }



    // Callback appelÃ© Ã  chaque pÃ©riphÃ©rique trouvÃ©.
    private val leScanCallback: ScanCallback = object : ScanCallback() {
        @SuppressLint("MissingPermission")
        override fun onScanResult(callbackType: Int, result: ScanResult) {
            super.onScanResult(callbackType, result)

//            // VÃ©rification de la permission
//            if (ActivityCompat.checkSelfPermission(
//                    this@ScanActivity, // Assurez-vous que 'this@ScanActivity' pointe vers votre activitÃ©
//                    Manifest.permission.BLUETOOTH_CONNECT
//                ) != PackageManager.PERMISSION_GRANTED
//            ) {
//                // La permission n'est pas accordÃ©e, vous pouvez demander la permission ici
//                // TODO: Demander la permission BLUETOOTH_CONNECT
//                return
//            }

            // CrÃ©ation de l'objet Device
            val device = Device(result.device.name, result.device.address, result.device)
            if (!device.name.isNullOrBlank() && !bleDevicesFoundList.contains(device)) {
                bleDevicesFoundList.add(device)
                // Indique Ã  l'adapter que nous avons ajoutÃ© un Ã©lÃ©ment
                findViewById<RecyclerView>(R.id.rvDevices).adapter?.notifyItemInserted(bleDevicesFoundList.size - 1)
            }
        }
    }

    private fun setupRecycler() {
        val rvDevice = findViewById<RecyclerView>(R.id.rvDevices) // RÃ©cupÃ©ration du RecyclerView prÃ©sent dans le layout
        rvDevice.layoutManager = LinearLayoutManager(this) // DÃ©finition du LayoutManager, Comment vont Ãªtre affichÃ©s les Ã©lÃ©ments, ici en liste
        rvDevice.adapter = DeviceAdapter(bleDevicesFoundList) { device ->
            // Le code Ã©crit ici sera appelÃ© lorsque l'utilisateur cliquera sur un Ã©lÃ©ment de la liste.
            // C'est un Â« callback Â», c'est-Ã -dire une mÃ©thode qui sera appelÃ©e Ã  un moment prÃ©cis.
            // Ã‰videmment, vous pouvez faire ce que vous voulez. Nous nous connecterons plus tard Ã  notre pÃ©riphÃ©rique

            // Pour la dÃ©mo, nous allons afficher un Toast avec le nom du pÃ©riphÃ©rique choisi par l'utilisateur.
            //Toast.makeText(this@ScanActivity, "Clique sur $device", Toast.LENGTH_SHORT).show()

            // Connect to the device
            BluetoothLEManager.currentDevice = device.device    // A garder ?
            connectToCurrentDevice()

        }
    }

    private fun setupWifiRecycler() {
        val rvDevice = findViewById<RecyclerView>(R.id.rvDevices) // RÃ©cupÃ©ration du RecyclerView prÃ©sent dans le layout
        rvDevice.layoutManager = LinearLayoutManager(this) // DÃ©finition du LayoutManager, Comment vont Ãªtre affichÃ©s les Ã©lÃ©ments, ici en liste
        rvDevice.adapter = DeviceAdapter(bleDevicesFoundList) { device ->
            // Le code Ã©crit ici sera appelÃ© lorsque l'utilisateur cliquera sur un Ã©lÃ©ment de la liste.
            // C'est un Â« callback Â», c'est-Ã -dire une mÃ©thode qui sera appelÃ©e Ã  un moment prÃ©cis.
            // Ã‰videmment, vous pouvez faire ce que vous voulez. Nous nous connecterons plus tard Ã  notre pÃ©riphÃ©rique

            // Pour la dÃ©mo, nous allons afficher un Toast avec le nom du pÃ©riphÃ©rique choisi par l'utilisateur.
            //Toast.makeText(this@ScanActivity, "Clique sur $device", Toast.LENGTH_SHORT).show()

            // Connect to the device
            BluetoothLEManager.currentDevice = device.device    // A garder ?
            connectToCurrentDevice()

        }
    }

    override fun onResume() {
        super.onResume()

        if (!packageManager.hasSystemFeature(PackageManager.FEATURE_BLUETOOTH_LE)) {
            // Test si le tÃ©lÃ©phone est compatible BLE, si c'est pas le cas, on finish() l'activity
            Toast.makeText(this, getString(R.string.not_compatible), Toast.LENGTH_SHORT).show()
            finish()
        } else if (hasPermission() && locationServiceEnabled()) {
            // Lancer suite => Activation BLE + Lancer Scan
            setupBLE()      // Lance le scan dans cette fonction
        } else if(!hasPermission()) {
            // On demande la permission
            askForPermission()
        } else {
            // On demande d'activer la localisation
            // IdÃ©alement on demande avec un activitÃ©.
            // Ã€ vous de me proposer mieux (Une activitÃ©, une dialog, etc)
            startActivity(Intent(Settings.ACTION_LOCATION_SOURCE_SETTINGS))
        }
    }

    @SuppressLint("MissingPermission")
    private fun disconnectFromCurrentDevice() {
        currentBluetoothGatt?.disconnect()
        BluetoothLEManager.currentDevice = null
        setUiMode(false)
    }

    @SuppressLint("MissingPermission")
    private fun connectToCurrentDevice() {
        BluetoothLEManager.currentDevice?.let { device ->
            //Toast.makeText(this, "Connexion en cours â€¦ $device", Toast.LENGTH_SHORT).show()


            currentBluetoothGatt = device.connectGatt(
                this,
                false,
                BluetoothLEManager.GattCallback(
                    onConnect = {
                        // On indique Ã  l'utilisateur que nous sommes correctement connectÃ©
                        runOnUiThread {
                            //Toast.makeText(this, "ConnectÃ© Ã  : $device", Toast.LENGTH_SHORT).show()
                            // Nous sommes connectÃ© au device, on active les notifications pour Ãªtre notifiÃ© si la LED change d'Ã©tat.

                            // Ã€ IMPLÃ‰MENTER
                            // Vous devez appeler la mÃ©thode qui active les notifications BLE
                            enableListenBleNotify()

                            // On change la vue Â« pour Ãªtre en mode connectÃ© Â»
                            setUiMode(true)


                            // On sauvegarde dans les Â« LocalPrÃ©fÃ©rence Â» de l'application le nom du dernier prÃ©phÃ©rique sur lequel nous nous sommes connectÃ©


                            // Ã€ IMPLÃ‰MENTER EN FONCTION DE CE QUE NOUS AVONS DIT ENSEMBLE
                        }
                    },
                    onNotify = { runOnUiThread {

                        //Toast.makeText(this, "onNotify", Toast.LENGTH_SHORT).show()

                        // VOUS DEVEZ APPELER ICI LA MÃ‰THODE QUI VA GÃ‰RER LE CHANGEMENT D'Ã‰TAT DE LA LED DANS L'INTERFACE
                        // Si it (BluetoothGattCharacteristic) est pour l'UUID CHARACTERISTIC_NOTIFY_STATE
                        // Alors vous devez appeler la mÃ©thode qui va gÃ©rer le changement d'Ã©tat de la LED

                        // LED ON / OFF
                        if(it.getUuid() == BluetoothLEManager.CHARACTERISTIC_NOTIFY_STATE) {
                             handleToggleLedNotificationUpdate(it)

                        // LED COUNT
                         } else if (it.getUuid() == BluetoothLEManager.CHARACTERISTIC_GET_COUNT) {
                             handleCountLedChangeNotificationUpdate(it)

                             // Toast affichant le nombre de fois que la led a Ã©tÃ© allumÃ©e
                             //Toast.makeText(this, it.getStringValue(0), Toast.LENGTH_SHORT).show()

                        // WIFI SCAN
                        } else if (it.getUuid() == BluetoothLEManager.CHARACTERISTIC_GET_WIFI_SCAN) {
                            // Ã€ IMPLÃ‰MENTER
                            handleOnNotifyNotificationReceived(it)
                        }
                    } },
                    onDisconnect = { runOnUiThread { disconnectFromCurrentDevice() } })
            )
        }
    }


    // Ajout de safe calls avec le point d'interrogation car les variables rvDevices, startScan etc... peuvent Ãªtre null (voir la dÃ©claration plus haute de ces variables private "var rvDevices: RecyclerView? = null"
    @SuppressLint("MissingPermission")
    private fun setUiMode(isConnected: Boolean) {
        if (isConnected) {
            // ConnectÃ© Ã  un pÃ©riphÃ©rique
            bleDevicesFoundList.clear()
            rvDevices?.visibility = View.GONE // Cache la liste des appareils trouvÃ©s
            startScan?.visibility = View.GONE // Cache le bouton de dÃ©marrage du scan
            currentConnexion?.visibility = View.VISIBLE // Affiche l'Ã©tat de la connexion

            // Met Ã  jour le texte de l'Ã©tat de la connexion
            currentConnexion?.text = getString(R.string.connected_to, BluetoothLEManager.currentDevice?.name)
            disconnect?.visibility = View.VISIBLE // Affiche le bouton de dÃ©connexion
            toggleLed?.visibility = View.VISIBLE // Affiche le bouton pour activer/dÃ©sactiver le LED
            toggleAnimation?.visibility = View.VISIBLE // Affiche le bouton pour activer/dÃ©sactiver le LED
            // A vÃ©rifier :
            ledStatus?.visibility = View.VISIBLE   // Affiche l'Ã©tat du LED
            ledCount?.visibility = View.VISIBLE    // Affiche le nombre de fois que la led a Ã©tÃ© allumÃ©e
        } else {
            // Non connectÃ©, reset de la vue
            rvDevices?.visibility = View.VISIBLE // Affiche la liste des appareils trouvÃ©s
            startScan?.visibility = View.VISIBLE // Affiche le bouton de dÃ©marrage du scan
            ledStatus?.visibility = View.GONE // Cache l'Ã©tat du LED
            currentConnexion?.visibility = View.GONE // Cache l'Ã©tat de la connexion
            disconnect?.visibility = View.GONE // Cache le bouton de dÃ©connexion
            toggleAnimation?.visibility = View.GONE // Affiche le bouton pour activer/dÃ©sactiver le LED
            // A vÃ©rifier :
            toggleLed?.visibility = View.GONE // Cache le bouton pour activer/dÃ©sactiver le LED
            ledCount?.visibility = View.GONE    // Cache le nombre de fois que la led a Ã©tÃ© allumÃ©e
        }
    }

    /**
     * RÃ©cupÃ©ration de Â« service Â» BLE (via UUID) qui nous permettra d'envoyer / recevoir des commandes
     */
    private fun getMainDeviceService(): BluetoothGattService? {
        return currentBluetoothGatt?.let { bleGatt ->
            val service = bleGatt.getService(BluetoothLEManager.DEVICE_UUID)
            service?.let {
                return it
            } ?: run {
                Toast.makeText(this, getString(R.string.uuid_not_found), Toast.LENGTH_SHORT).show()
                return null;
            }
        } ?: run {
            Toast.makeText(this, getString(R.string.not_connected), Toast.LENGTH_SHORT).show()
            return null
        }
    }

    /**
     * On change l'Ã©tat de la LED (via l'UUID de toggle)
     */
    @SuppressLint("MissingPermission")
    private fun toggleLed() {
        getMainDeviceService()?.let { service ->
            val toggleLed = service.getCharacteristic(BluetoothLEManager.CHARACTERISTIC_TOGGLE_LED_UUID)
            toggleLed.setValue("1")
            currentBluetoothGatt?.writeCharacteristic(toggleLed)
        }
    }

    @SuppressLint("MissingPermission")
    private fun enableListenBleNotify() {
        getMainDeviceService()?.let { service ->
            Toast.makeText(this, getString(R.string.enable_ble_notifications), Toast.LENGTH_SHORT).show()
            // Indique que le GATT Client va Ã©couter les notifications sur le charactÃ©risque
            val notificationStatus = service.getCharacteristic(BluetoothLEManager.CHARACTERISTIC_NOTIFY_STATE)
            val notificationLedCount = service.getCharacteristic(BluetoothLEManager.CHARACTERISTIC_GET_COUNT)
            val wifiScan = service.getCharacteristic(BluetoothLEManager.CHARACTERISTIC_GET_WIFI_SCAN)

            currentBluetoothGatt?.setCharacteristicNotification(notificationStatus, true)
            currentBluetoothGatt?.setCharacteristicNotification(notificationLedCount, true)
            currentBluetoothGatt?.setCharacteristicNotification(wifiScan, true)
        }
    }

    // LED ON / OFF
    private fun handleToggleLedNotificationUpdate(characteristic: BluetoothGattCharacteristic) {
        if (characteristic.getStringValue(0).equals("1", ignoreCase = true)) {
            ledStatus?.setImageResource(R.drawable.led_on)
        } else {
            ledStatus?.setImageResource(R.drawable.led_off)
        }
    }


    // LED COUNT
    private fun handleCountLedChangeNotificationUpdate(characteristic: BluetoothGattCharacteristic) {
//        characteristic.getStringValue(0).toIntOrNull()?.let {
//            ledCount?.text = getString(R.string.led_count, it)  // ledCount?.text = getString(R.string.led_count, it)
//        }

        val stringValue = characteristic.getStringValue(0)
        // Affiche stringValue dans un toast
        Toast.makeText(this, stringValue, Toast.LENGTH_SHORT).show()
        // affiche un toast "hello"
        Toast.makeText(this, "hello", Toast.LENGTH_SHORT).show()
    }


    // WIFI SCAN
    private fun handleOnNotifyNotificationReceived(characteristic: BluetoothGattCharacteristic) {
        // TODO : Vous devez ici rÃ©cupÃ©rer la liste des rÃ©seaux WiFi disponibles et les afficher dans une liste.
        // Vous pouvez utiliser un RecyclerView pour afficher la liste des rÃ©seaux WiFi disponibles.
        // Vous devez crÃ©er un nouvel Activity pour afficher la liste des rÃ©seaux WiFi disponibles.

        // OK Vous devez crÃ©er un nouvel Adapter pour afficher la liste des rÃ©seaux WiFi disponibles.
        // Vous devez crÃ©er un nouvel ViewHolder pour afficher la liste des rÃ©seaux WiFi disponibles.
        // Vous devez crÃ©er un nouvel Layout pour afficher la liste des rÃ©seaux WiFi disponibles.
        // Vous devez crÃ©er un nouvel Layout pour afficher un Ã©lÃ©ment de la liste des rÃ©seaux WiFi disponibles.
        // Vous devez crÃ©er un nouvel objet Â« Data Â» pour stocker les informations d'un rÃ©seau WiFi disponible.

        // Toast affichant characteristic
        //Toast.makeText(this, characteristic.getStringValue(0), Toast.LENGTH_SHORT).show()

        //Toast.makeText(this, getString(R.string.enable_ble_notifications), Toast.LENGTH_SHORT).show()
    }

    @SuppressLint("MissingPermission")
    private fun sendAnimation() {
        getMainDeviceService()?.let { service ->
            val toggleLed = service.getCharacteristic(BluetoothLEManager.CHARACTERISTIC_TOGGLE_LED_UUID)
            toggleLed.setValue("101010101111011111000010101010")
            currentBluetoothGatt?.writeCharacteristic(toggleLed)
        }
    }
}