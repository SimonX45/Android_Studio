package com.example.helloworld

import android.annotation.SuppressLint
import android.app.Activity
import android.bluetooth.BluetoothAdapter
import android.bluetooth.BluetoothClass
import android.bluetooth.BluetoothGatt
import android.bluetooth.BluetoothManager
import android.bluetooth.le.BluetoothLeScanner
import android.bluetooth.le.ScanCallback
import android.bluetooth.le.ScanFilter
import android.bluetooth.le.ScanResult
import android.bluetooth.le.ScanSettings
import android.content.Context
import android.content.Intent
import android.content.pm.PackageManager
import android.location.LocationManager
import android.os.Build
import androidx.appcompat.app.AppCompatActivity
import android.os.Bundle
import android.os.Handler
import android.os.Looper
import android.widget.Toast
import androidx.activity.result.contract.ActivityResultContracts
import androidx.core.app.ActivityCompat
import androidx.core.content.ContextCompat

import android.Manifest
import android.provider.Settings
import com.afollestad.materialdialogs.MaterialDialog

//import android.content.pm.PackageManager
//import android.os.Build



class ScanActivity : AppCompatActivity() {

    companion object {
        // Variable ajoutÃ©e par moi car elle n'Ã©tait pas dans le code fournit apr le prof
        // Demande de permission
        private const val PERMISSION_REQUEST_LOCATION = 1
    }

    // Gestion du Bluetooth
    // L'Adapter permettant de se connecter
    private var bluetoothAdapter: BluetoothAdapter? = null

    // La connexion actuellement Ã©tablie
    private var currentBluetoothGatt: BluetoothGatt? = null

    // Â« Interface systÃ¨me nous permettant de scanner Â»
    private var bluetoothLeScanner: BluetoothLeScanner? = null

    // Parametrage du scan BLE
    private val scanSettings = ScanSettings.Builder().setScanMode(ScanSettings.SCAN_MODE_LOW_LATENCY).build()

    // On ne retourne que les Â« Devices Â» proposant le bon UUID
    private var scanFilters: List<ScanFilter> = arrayListOf(
    //  ScanFilter.Builder().setServiceUuid(ParcelUuid(BluetoothLEManager.DEVICE_UUID)).build()
    )

    // Variable de fonctionnement
    private var mScanning = false
    private val handler = Handler(Looper.getMainLooper())

    // DataSource de notre adapter.
    private val bleDevicesFoundList = arrayListOf<BluetoothClass.Device>()

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_scan)
    }




    /**
     * GÃ¨re l'action aprÃ¨s la demande de permission.
     * 2 cas possibles :
     * - RÃ©ussite ðŸŽ‰.
     * - Ã‰chec (refus utilisateur).
     */
    override fun onRequestPermissionsResult(requestCode: Int, permissions: Array<out String>, grantResults: IntArray) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults)

        if (requestCode == PERMISSION_REQUEST_LOCATION) {
            if (grantResults[0] == PackageManager.PERMISSION_GRANTED && locationServiceEnabled()) {
                // Permission OK & service de localisation actif => Nous pouvons lancer l'initialisation du BLE.
                // En appelant la mÃ©thode setupBLE(), La mÃ©thode setupBLE() va initialiser le BluetoothAdapter et lancera le scan.
                // TODO
                setupBLE()
            } else if (!locationServiceEnabled()) {
                // Inviter Ã  activer la localisation
                startActivity(Intent(Settings.ACTION_LOCATION_SOURCE_SETTINGS))
            } else {
                // Permission KO => GÃ©rer le cas.
                // Vous devez ici modifier le code pour gÃ©rer le cas d'erreur (permission refusÃ©)
                // Avec par exemple une Dialog

                // TODO
                // Demande Ã  l'utilisateur d'accepter la permission de localisation
                MaterialDialog(this).show {
                    title(R.string.titre_bouton)
                    message(R.string.message_permission_localisation_refusee)
                }
            }
        }
    }

    /**
     * Permet de vÃ©rifier si l'application possede la permission Â« Localisation Â». OBLIGATOIRE pour scanner en BLE
     * Sur Android 11, il faut la permission Â« BLUETOOTH_CONNECT Â» et Â« BLUETOOTH_SCAN Â»
     * Sur Android 10 et infÃ©rieur, il faut la permission Â« ACCESS_FINE_LOCATION Â» qui permet de scanner en BLE
     */
    private fun hasPermission(): Boolean {
        return if (Build.VERSION.SDK_INT < Build.VERSION_CODES.S) {
            ContextCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED
        } else {
            ContextCompat.checkSelfPermission(this, Manifest.permission.BLUETOOTH_CONNECT) == PackageManager.PERMISSION_GRANTED && ContextCompat.checkSelfPermission(this, Manifest.permission.BLUETOOTH_SCAN) == PackageManager.PERMISSION_GRANTED
        }
    }

    /**
     * Demande de la permission (ou des permissions) Ã  l'utilisateur.
     * Sur Android 11, il faut la permission Â« BLUETOOTH_CONNECT Â» et Â« BLUETOOTH_SCAN Â»
     * Sur Android 10 et infÃ©rieur, il faut la permission Â« ACCESS_FINE_LOCATION Â» qui permet de scanner en BLE
     */
    private fun askForPermission() {
        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.S) {
            ActivityCompat.requestPermissions(this, arrayOf(Manifest.permission.ACCESS_FINE_LOCATION), PERMISSION_REQUEST_LOCATION)
        } else {
            ActivityCompat.requestPermissions(this, arrayOf(Manifest.permission.BLUETOOTH_CONNECT, Manifest.permission.BLUETOOTH_SCAN), PERMISSION_REQUEST_LOCATION)
        }
    }

    private fun locationServiceEnabled(): Boolean {
        return if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.P) {
            // This is new method provided in API 28
            val lm = this.getSystemService(Context.LOCATION_SERVICE) as LocationManager
            lm.isLocationEnabled
        } else {
            // This is Deprecated in API 28
            val mode = Settings.Secure.getInt(this.contentResolver, Settings.Secure.LOCATION_MODE, Settings.Secure.LOCATION_MODE_OFF)
            mode != Settings.Secure.LOCATION_MODE_OFF
        }
    }

    /**
     * La mÃ©thode Â« registerForActivityResult Â» permet de gÃ©rer le rÃ©sultat d'une activitÃ©.
     * Ce code est appelÃ© Ã  chaque fois que l'utilisateur rÃ©pond Ã  la demande d'activation du Bluetooth (visible ou non)
     * Si l'utilisateur accepte et donc que le BLE devient disponible, on lance le scan.
     * Si l'utilisateur refuse, on affiche un message d'erreur (Toast).
     */
    val registerForResult = registerForActivityResult(ActivityResultContracts.StartActivityForResult()) {
        if (it.resultCode == Activity.RESULT_OK) {
            // Le Bluetooth est activÃ©, on lance le scan
            scanLeDevice()
        } else {
            // Bluetooth non activÃ©, vous DEVEZ gÃ©rer ce cas autrement qu'avec un Toast.
            Toast.makeText(this, "Bluetooth non activÃ©", Toast.LENGTH_SHORT).show()
        }
    }

    /**
     * RÃ©cupÃ©ration de l'adapter Bluetooth & vÃ©rification si celui-ci est actif.
     * Si il n'est pas actif, on demande Ã  l'utilisateur de l'activer. Dans ce cas, au rÃ©sultat le code prÃ©sent dans Â« registerForResult Â» sera appelÃ©.
     * Si il est dÃ©jÃ  actif, on lance le scan.
     */
    @SuppressLint("MissingPermission")
    private fun setupBLE() {
        (getSystemService(BLUETOOTH_SERVICE) as BluetoothManager?)?.let { bluetoothManager ->
            bluetoothAdapter = bluetoothManager.adapter
            if (bluetoothAdapter != null && !bluetoothManager.adapter.isEnabled) {
                registerForResult.launch(Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE))
            } else {
                scanLeDevice()
            }
        }
    }

    // Le scan va durer 10 secondes seulement, sauf si vous passez une autre valeur comme paramÃ¨tre.
    private fun scanLeDevice(scanPeriod: Long = 10000) {
        if (!mScanning) {
            // VÃ©rifiez si les permissions sont accordÃ©es
            if (hasPermission()) {              // Ajout de la condition pour vÃ©rifier si la permission est accordÃ©e
                bluetoothLeScanner = bluetoothAdapter?.bluetoothLeScanner

                // On vide la liste qui contient les devices actuellement trouvÃ©s
                bleDevicesFoundList.clear()

                // Ã‰vite de scanner en double
                mScanning = true

                // On lance une tache qui durera Â« scanPeriod Â»
                handler.postDelayed({
                    mScanning = false
                    bluetoothLeScanner?.stopScan(leScanCallback)
                    Toast.makeText(this, getString(R.string.scan_ended), Toast.LENGTH_SHORT).show()
                }, scanPeriod)

                // On lance le scan
                bluetoothLeScanner?.startScan(scanFilters, scanSettings, leScanCallback)
            } else {
                // Demander les permissions ou gÃ©rer l'absence de permission
            }
        }
    }

    // Callback appelÃ© Ã  chaque pÃ©riphÃ©rique trouvÃ©.
    private val leScanCallback: ScanCallback = object : ScanCallback() {
        override fun onScanResult(callbackType: Int, result: ScanResult) {
            super.onScanResult(callbackType, result)

            // C'est ici que nous allons crÃ©er notre Â« Device Â» et l'ajouter dans la dataSource de notre RecyclerView

            // val device = Device(result.device.name, result.device.address, result.device)
            // if (!device.name.isNullOrBlank() && !bleDevicesFoundList.contains(device)) {
            //     bleDevicesFoundList.add(device)
            //     Indique Ã  l'adapter que nous avons ajoutÃ© un Ã©lÃ©ment, il va donc se mettre Ã  jour
            //     findViewById<RecyclerView>(R.id.rvDevices).adapter?.notifyItemInserted(bleDevicesFoundList.size - 1)
            // }
        }
    }

}